/* The following code was generated by JFlex 1.4.3 on 01.02.19 16:06 */

/*
 * Copyright 2000-2008 JetBrains s.r.o.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.plugins.scala.lang.scaladoc.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.plugins.scala.lang.scaladoc.lexer.docsyntax.*;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 01.02.19 16:06 from the specification file
 * <tt>../../scaladoc/lexer/scaladoc.flex</tt>
 */
public class _ScalaDocLexer implements FlexLexer, ScalaDocTokenType, ScalaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INNER_CODE_WHITESPACE = 44;
  public static final int PARAM_DOC_DEFINE_TAG_VALUE = 22;
  public static final int CODE_BAD_LINK = 36;
  public static final int COMMENT_DATA = 4;
  public static final int PARAM_DEFINE_TAG_DOC_SPACE = 12;
  public static final int PARAM_DOC_TAG_VALUE = 18;
  public static final int COMMENT_DATA_START = 2;
  public static final int DOC_TAG_VALUE_IN_PAREN = 24;
  public static final int PARAM_DOC_THROWS_TAG_VALUE = 20;
  public static final int CODE_LINK_INNER = 34;
  public static final int HTTP_LINK_INNER = 38;
  public static final int DOC_TAG_VALUE = 16;
  public static final int INLINE_TAG_NAME = 28;
  public static final int PARAM_TAG_DOC_SPACE = 8;
  public static final int DOC_TAG_VALUE_IN_LTGT = 26;
  public static final int PARAM_THROWS_TAG_DOC_SPACE = 10;
  public static final int COMMENT_INNER_CODE = 42;
  public static final int DOC_TAG_VALUE_SPACE = 40;
  public static final int YYINITIAL = 0;
  public static final int PARAM_TAG_SPACE = 14;
  public static final int TAG_DOC_SPACE = 6;
  public static final int INLINE_DOC_TAG_VALUE = 30;
  public static final int INLINE_TAG_DOC_SPACE = 32;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12,  7,  7, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17,  7,  7, 18, 18, 19, 19, 20, 20
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\21\1\2\1\7\1\0\1\2\1\1\16\21\4\0\1\2\1\10"+
    "\1\20\1\11\1\31\2\10\1\24\1\37\1\40\1\12\1\10\1\26"+
    "\1\10\1\25\1\16\10\3\2\3\1\14\1\0\1\10\1\30\1\10"+
    "\1\10\1\41\32\4\1\27\1\15\1\36\1\13\1\22\1\23\1\52"+
    "\2\4\1\42\1\43\1\44\1\4\1\32\1\45\3\4\1\53\1\46"+
    "\1\50\1\34\1\4\1\47\1\35\1\33\2\4\1\51\3\4\1\6"+
    "\1\10\1\5\1\10\6\21\1\17\32\21\2\0\4\4\1\10\2\0"+
    "\1\10\1\4\1\0\1\10\1\21\1\10\1\0\1\10\1\10\3\0"+
    "\1\4\4\0\1\4\5\0\27\4\1\10\37\4\1\10\u01ca\4\4\0"+
    "\14\4\16\0\5\4\7\0\1\4\1\0\1\4\21\0\160\21\5\4"+
    "\1\0\2\4\2\0\4\4\10\0\1\4\1\0\3\4\1\0\1\4"+
    "\1\0\24\4\1\0\123\4\1\10\213\4\1\10\5\21\2\0\236\4"+
    "\11\0\46\4\2\0\1\4\7\0\47\4\7\0\1\4\1\0\55\21"+
    "\1\0\1\21\1\0\2\21\1\0\2\21\1\0\1\21\10\0\33\4"+
    "\5\0\3\4\15\0\5\21\1\0\3\10\2\0\1\4\2\0\2\10"+
    "\13\21\5\0\53\4\37\21\4\0\2\4\1\21\143\4\1\0\1\4"+
    "\10\21\1\10\6\21\2\4\2\21\1\10\4\21\2\4\12\21\3\4"+
    "\2\10\1\4\17\0\1\21\1\4\1\21\36\4\33\21\2\0\131\4"+
    "\13\21\1\4\16\0\12\21\41\4\11\21\2\4\1\10\3\0\1\4"+
    "\5\0\26\4\4\21\1\4\11\21\1\4\3\21\1\4\5\21\22\0"+
    "\31\4\3\21\104\0\1\4\1\0\13\4\67\0\33\21\1\0\4\21"+
    "\66\4\3\21\1\4\22\21\1\4\7\21\12\4\2\21\2\0\12\21"+
    "\1\0\7\4\1\0\7\4\1\0\3\21\1\0\10\4\2\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\21"+
    "\1\4\7\21\2\0\2\21\2\0\3\21\1\4\10\0\1\21\4\0"+
    "\2\4\1\0\3\4\2\21\2\0\12\21\4\4\6\0\1\10\1\4"+
    "\5\0\3\21\1\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4"+
    "\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1\21\1\0\5\21"+
    "\4\0\2\21\2\0\3\21\3\0\1\21\7\0\4\4\1\0\1\4"+
    "\7\0\14\21\3\4\1\21\13\0\3\21\1\0\11\4\1\0\3\4"+
    "\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\21"+
    "\1\4\10\21\1\0\3\21\1\0\3\21\2\0\1\4\17\0\2\4"+
    "\2\21\2\0\12\21\1\0\1\4\17\0\3\21\1\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0"+
    "\1\21\1\4\7\21\2\0\2\21\2\0\3\21\10\0\2\21\4\0"+
    "\2\4\1\0\3\4\2\21\2\0\12\21\1\10\1\4\20\0\1\21"+
    "\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0"+
    "\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4\4\0"+
    "\5\21\3\0\3\21\1\0\4\21\2\0\1\4\6\0\1\21\16\0"+
    "\12\21\3\0\6\10\1\4\1\10\6\0\3\21\1\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4\7\21"+
    "\1\0\3\21\1\0\4\21\7\0\2\21\1\0\2\4\6\0\2\4"+
    "\2\21\2\0\12\21\17\0\1\10\2\0\2\21\1\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\12\4\1\0\5\4\2\0\1\21\1\4"+
    "\7\21\1\0\3\21\1\0\4\21\7\0\2\21\7\0\1\4\1\0"+
    "\2\4\2\21\2\0\12\21\1\0\2\4\17\0\2\21\1\0\10\4"+
    "\1\0\3\4\1\0\51\4\2\0\1\4\7\21\1\0\3\21\1\0"+
    "\4\21\1\4\10\0\1\21\10\0\2\4\2\21\2\0\12\21\11\0"+
    "\1\10\6\4\2\0\2\21\1\0\22\4\3\0\30\4\1\0\11\4"+
    "\1\0\1\4\2\0\7\4\3\0\1\21\4\0\6\21\1\0\1\21"+
    "\1\0\10\21\22\0\2\21\15\0\60\4\1\21\2\4\7\21\4\0"+
    "\10\4\10\21\1\0\12\21\47\0\2\4\1\0\1\4\2\0\2\4"+
    "\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4"+
    "\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\21\2\4"+
    "\6\21\1\0\2\21\1\4\2\0\5\4\1\0\1\4\1\0\6\21"+
    "\2\0\12\21\2\0\4\4\40\0\1\4\3\10\17\0\1\10\1\0"+
    "\3\10\2\21\6\10\12\21\12\0\1\10\1\21\1\10\1\21\1\10"+
    "\1\21\4\0\2\21\10\4\1\0\44\4\4\0\24\21\1\0\2\21"+
    "\5\4\13\21\1\0\44\21\1\0\10\10\1\21\6\10\1\0\2\10"+
    "\5\0\4\10\47\0\53\4\24\21\1\4\12\21\6\0\6\4\4\21"+
    "\4\4\3\21\1\4\3\21\2\4\7\21\3\4\4\21\15\4\14\21"+
    "\1\4\17\21\2\10\46\4\1\0\1\4\5\0\1\4\2\0\53\4"+
    "\1\0\u014d\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4"+
    "\2\0\51\4\1\0\4\4\2\0\41\4\1\0\4\4\2\0\7\4"+
    "\1\0\1\4\1\0\4\4\2\0\17\4\1\0\71\4\1\0\4\4"+
    "\2\0\103\4\2\0\3\21\40\0\20\4\12\10\6\0\125\4\14\0"+
    "\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4\3\0\3\4\17\0"+
    "\15\4\1\0\4\4\3\21\13\0\22\4\3\21\13\0\22\4\2\21"+
    "\14\0\15\4\1\0\3\4\1\0\2\21\14\0\64\4\40\21\3\0"+
    "\1\4\3\0\2\4\1\21\2\0\12\21\41\0\3\21\2\0\12\21"+
    "\6\0\130\4\10\0\51\4\1\21\1\4\5\0\106\4\12\0\35\4"+
    "\3\0\14\21\4\0\14\21\4\0\1\10\5\0\12\21\36\4\2\0"+
    "\5\4\13\0\54\4\4\0\21\21\7\4\2\21\6\0\12\21\4\0"+
    "\42\10\27\4\5\21\4\0\65\4\12\21\1\0\35\21\2\0\13\21"+
    "\6\0\12\21\15\0\1\4\130\0\5\21\57\4\21\21\7\4\4\0"+
    "\12\21\7\0\12\10\11\21\11\10\3\0\3\21\36\4\15\21\2\4"+
    "\12\21\54\4\16\21\14\0\44\4\24\21\10\0\12\21\3\0\3\4"+
    "\12\21\44\4\122\0\3\21\1\0\25\21\4\4\1\21\4\4\3\21"+
    "\2\4\11\0\300\4\47\21\25\0\4\21\u0116\4\2\0\6\4\2\0"+
    "\46\4\2\0\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0"+
    "\3\4\1\0\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0"+
    "\3\4\1\0\7\4\16\0\5\21\30\0\1\20\1\20\5\21\20\0"+
    "\2\4\3\0\1\10\15\0\1\10\1\0\1\4\13\0\5\21\5\0"+
    "\6\21\1\0\1\4\10\0\3\10\2\0\1\4\12\0\3\10\3\0"+
    "\15\4\3\0\33\4\25\0\15\21\4\0\1\21\3\0\14\21\17\0"+
    "\2\10\1\4\4\10\1\4\2\10\12\4\1\10\1\4\2\10\1\10"+
    "\5\4\6\10\1\4\1\10\1\4\1\10\1\4\1\10\4\4\1\10"+
    "\13\4\2\10\4\4\5\10\5\4\1\10\1\10\2\10\1\4\1\10"+
    "\20\0\51\4\7\0\5\10\5\10\2\10\4\10\1\10\2\10\1\10"+
    "\2\10\1\10\7\10\1\10\37\10\2\10\2\10\1\10\1\10\1\10"+
    "\37\10\u010c\10\10\10\4\10\24\10\2\10\7\10\2\0\121\10\1\10"+
    "\36\10\31\10\50\10\6\10\22\10\14\0\47\10\31\0\13\10\121\0"+
    "\116\10\26\0\267\10\1\10\11\10\1\10\66\10\10\10\157\10\1\10"+
    "\220\10\1\0\147\10\54\0\54\10\5\10\2\0\37\10\12\0\20\10"+
    "\u0100\10\203\10\26\0\77\10\4\0\40\10\2\0\u0102\10\60\10\25\10"+
    "\2\10\6\10\3\0\12\10\246\0\57\4\1\0\57\4\1\0\205\4"+
    "\6\10\4\4\3\21\2\4\14\0\46\4\1\0\1\4\5\0\1\4"+
    "\2\0\70\4\7\0\1\4\17\0\1\21\27\4\11\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\40\21\57\0\1\4\120\0\32\10\1\0"+
    "\131\10\14\0\326\10\32\0\14\10\10\0\1\10\3\4\12\0\2\10"+
    "\14\0\1\10\11\4\6\21\1\0\5\4\2\10\5\4\1\0\2\10"+
    "\1\0\126\4\2\0\2\21\2\0\3\4\1\0\132\4\1\0\4\4"+
    "\5\0\51\4\3\0\136\4\1\0\2\10\4\0\12\10\33\4\5\0"+
    "\44\10\14\0\20\4\37\10\13\0\36\10\10\0\1\10\17\0\40\10"+
    "\12\0\47\10\17\0\77\10\1\0\u0100\10\u19b6\4\12\0\100\10\u51cd\4"+
    "\63\0\u048d\4\3\0\67\10\11\0\56\4\2\0\u010d\4\3\0\20\4"+
    "\12\21\2\4\24\0\57\4\1\21\4\0\12\21\1\0\31\4\7\0"+
    "\1\21\120\4\2\21\45\0\11\4\2\0\147\4\2\0\4\4\1\0"+
    "\4\4\14\0\13\4\115\0\12\4\1\21\3\4\1\21\4\4\1\21"+
    "\27\4\5\21\4\10\12\0\2\10\1\4\1\10\6\0\64\4\14\0"+
    "\2\21\62\4\21\21\13\0\12\21\6\0\22\21\6\4\3\0\1\4"+
    "\4\0\12\21\34\4\10\21\2\0\27\4\15\21\14\0\35\4\3\0"+
    "\4\21\57\4\16\21\16\0\1\4\12\21\46\0\51\4\16\21\11\0"+
    "\3\4\1\21\10\4\2\21\2\0\12\21\6\0\27\4\3\10\1\4"+
    "\1\21\4\0\60\4\1\21\1\4\3\21\2\4\2\21\5\4\2\21"+
    "\1\4\1\21\1\4\30\0\3\4\2\0\13\4\5\21\2\0\3\4"+
    "\2\21\12\0\6\4\2\0\6\4\2\0\6\4\11\0\7\4\1\0"+
    "\7\4\221\0\43\4\10\21\1\0\2\21\2\0\12\21\6\0\u2ba4\4"+
    "\14\0\27\4\4\0\61\4\u2104\0\u016e\4\2\0\152\4\46\0\7\4"+
    "\14\0\5\4\5\0\1\4\1\21\12\4\1\10\15\4\1\0\5\4"+
    "\1\0\1\4\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4"+
    "\22\0\100\4\2\0\66\4\50\0\15\4\1\10\2\0\20\21\20\0"+
    "\7\21\14\0\2\4\30\0\3\4\22\0\1\10\1\0\3\10\2\0"+
    "\1\4\6\0\5\4\1\0\207\4\2\0\1\21\4\0\1\4\6\0"+
    "\1\10\4\0\12\21\2\0\3\10\2\0\32\4\4\0\1\4\1\0"+
    "\32\4\1\0\1\10\1\0\1\10\7\0\131\4\3\0\6\4\2\0"+
    "\6\4\2\0\6\4\2\0\3\4\3\0\2\4\1\10\1\0\1\10"+
    "\2\4\1\0\1\10\4\10\2\10\12\0\3\21\2\10\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\25\0\3\1\1\2\1\3\2\2\1\4\1\2\1\5"+
    "\3\2\1\6\3\2\1\7\1\10\1\11\1\1\1\12"+
    "\1\13\1\14\1\15\1\16\1\15\1\17\1\20\1\21"+
    "\1\22\2\23\1\1\2\24\1\1\1\25\1\23\1\15"+
    "\1\26\1\1\1\7\1\27\1\30\2\31\2\1\1\32"+
    "\2\33\2\34\1\0\1\35\3\0\1\36\1\37\1\40"+
    "\1\41\1\42\1\0\1\43\4\44\1\23\2\0\1\23"+
    "\1\24\1\45\2\0\1\24\1\0\1\23\1\46\1\31"+
    "\3\0\1\31\1\0\1\47\1\50\1\51\1\52\1\0"+
    "\1\42\3\44\1\23\1\24\1\53\1\31\1\54\2\0"+
    "\3\44\2\45\3\0\3\44\1\53\1\55\1\0\1\44"+
    "\1\56\1\44\1\57\1\0\1\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u0370\0\u039c\0\u03c8"+
    "\0\u0370\0\u03f4\0\u0420\0\u039c\0\u0370\0\u044c\0\u0370\0\u0478"+
    "\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8"+
    "\0\u0604\0\u04d0\0\u0630\0\u065c\0\u0688\0\u0370\0\u06b4\0\u039c"+
    "\0\u06e0\0\u0370\0\u0370\0\u0370\0\u070c\0\u0738\0\u0764\0\u0790"+
    "\0\u07bc\0\u07e8\0\u0370\0\u0814\0\u0840\0\u0370\0\u086c\0\u0898"+
    "\0\u0370\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0554\0\u0974\0\u0370"+
    "\0\u039c\0\u0370\0\u09a0\0\u039c\0\u0370\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u0370\0\u0a50\0\u0370\0\u0a7c\0\u0aa8\0\u0ad4\0\u0370\0\u0b00"+
    "\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0764\0\u0bdc\0\u0370\0\u0c08"+
    "\0\u0370\0\u07e8\0\u0c34\0\u0c60\0\u0840\0\u0840\0\u086c\0\u0c8c"+
    "\0\u0cb8\0\u0948\0\u0ce4\0\u0d10\0\u0d3c\0\u0370\0\u0370\0\u0a24"+
    "\0\u0d68\0\u0d94\0\u0ad4\0\u0dc0\0\u0dec\0\u0e18\0\u0764\0\u0e44"+
    "\0\u0370\0\u0e70\0\u0370\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c"+
    "\0\u07e8\0\u0948\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054"+
    "\0\u0948\0\u0370\0\u1080\0\u10ac\0\u0b00\0\u10d8\0\u0370\0\u1104"+
    "\0\u0b00\0\u0b00";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\12\26\1\27\3\26\1\30\35\26\1\31\2\32\3\31"+
    "\1\33\1\32\2\31\1\34\1\35\6\31\1\36\1\37"+
    "\1\40\1\31\1\41\1\42\1\43\1\44\4\31\1\45"+
    "\2\31\1\46\13\31\1\32\1\47\3\31\1\33\1\32"+
    "\2\31\1\34\1\35\6\31\1\36\1\37\1\40\1\31"+
    "\1\41\1\42\1\50\1\44\4\31\1\45\15\31\1\26"+
    "\2\51\4\26\1\51\2\26\1\27\14\26\1\52\25\26"+
    "\1\53\1\54\4\26\1\53\2\26\1\27\42\26\1\53"+
    "\1\55\4\26\1\53\2\26\1\27\41\26\2\56\1\57"+
    "\7\56\1\60\41\56\12\26\1\27\41\26\1\31\2\53"+
    "\2\61\2\31\1\53\1\31\1\62\1\34\7\31\1\61"+
    "\2\31\1\61\1\63\1\61\1\31\6\61\1\64\2\31"+
    "\12\61\4\26\1\65\3\26\7\66\3\26\1\65\1\67"+
    "\4\26\1\66\5\65\3\26\1\66\12\65\4\26\1\70"+
    "\3\26\7\71\3\26\1\70\1\72\1\26\1\73\2\26"+
    "\1\71\5\70\3\26\1\71\12\70\3\56\2\74\1\56"+
    "\1\75\3\56\1\60\7\56\1\74\6\56\5\74\4\56"+
    "\12\74\1\26\2\32\2\61\2\26\1\32\2\26\1\27"+
    "\7\26\1\61\2\26\1\61\1\63\1\61\1\26\6\61"+
    "\1\26\1\76\1\26\12\61\12\26\1\27\26\26\1\77"+
    "\12\26\5\100\1\101\46\100\1\26\2\102\2\26\1\101"+
    "\1\26\1\102\2\26\1\27\45\26\1\103\3\26\7\104"+
    "\3\26\1\103\1\105\1\26\1\73\2\26\1\104\5\103"+
    "\1\106\2\26\1\104\12\103\1\26\1\107\5\26\1\107"+
    "\2\26\1\27\23\26\1\106\15\26\1\110\2\53\4\110"+
    "\1\53\2\110\1\111\41\110\1\112\1\32\3\112\1\113"+
    "\1\112\1\32\44\112\66\0\1\114\3\0\1\115\47\0"+
    "\1\116\42\0\2\32\4\0\1\32\52\0\1\117\32\0"+
    "\1\120\34\0\1\121\55\0\1\122\55\0\1\123\54\0"+
    "\1\124\54\0\1\43\26\0\2\125\1\0\1\126\13\0"+
    "\1\125\6\0\5\125\4\0\12\125\36\0\1\127\15\0"+
    "\1\130\2\0\4\130\1\0\23\130\1\131\1\132\5\130"+
    "\1\133\11\130\2\0\1\47\101\0\1\50\24\0\2\51"+
    "\4\0\1\51\45\0\2\53\4\0\1\53\45\0\1\53"+
    "\1\54\4\0\1\53\45\0\1\53\1\55\4\0\1\53"+
    "\46\0\1\57\54\0\2\61\15\0\1\61\2\0\1\61"+
    "\1\0\1\61\1\0\6\61\3\0\12\61\3\0\2\65"+
    "\12\0\1\65\1\0\1\65\1\134\6\0\5\65\4\0"+
    "\12\65\10\0\7\66\11\0\1\66\10\0\1\66\12\0"+
    "\1\135\1\0\5\135\1\0\5\135\1\136\1\135\2\0"+
    "\2\135\1\137\30\135\3\0\2\70\12\0\1\70\1\0"+
    "\1\70\1\140\2\0\1\141\3\0\5\70\4\0\12\70"+
    "\10\0\7\71\6\0\1\141\2\0\1\71\10\0\1\71"+
    "\12\0\1\142\1\0\5\142\1\0\5\142\1\143\1\142"+
    "\2\0\2\142\1\144\30\142\3\0\2\74\15\0\1\74"+
    "\6\0\5\74\4\0\12\74\5\145\1\146\1\145\1\0"+
    "\44\145\1\147\2\0\2\147\1\0\1\147\1\0\44\147"+
    "\5\100\1\0\46\100\1\0\2\102\4\0\1\102\47\0"+
    "\2\103\12\0\1\103\1\0\1\103\1\150\2\0\1\141"+
    "\3\0\5\103\1\151\3\0\12\103\10\0\7\104\6\0"+
    "\1\141\2\0\1\104\5\0\1\151\2\0\1\104\12\0"+
    "\1\152\1\0\5\152\1\0\5\152\1\153\1\152\2\0"+
    "\2\152\1\154\30\152\1\0\2\107\4\0\1\107\51\0"+
    "\1\155\60\0\1\156\47\0\1\157\45\0\1\160\2\0"+
    "\4\160\1\0\44\160\24\0\1\161\61\0\1\162\24\0"+
    "\2\125\15\0\1\125\6\0\5\125\4\0\12\125\5\126"+
    "\1\163\1\126\1\0\44\126\1\130\2\0\4\130\1\0"+
    "\45\130\2\0\4\130\1\0\22\130\1\164\1\130\1\132"+
    "\20\130\2\0\4\130\1\0\42\130\1\165\2\130\2\0"+
    "\4\130\1\0\33\130\1\166\10\130\3\0\2\65\3\0"+
    "\7\66\1\65\1\0\1\65\1\134\5\0\1\66\5\65"+
    "\3\0\1\66\12\65\1\135\1\0\5\135\1\0\5\135"+
    "\1\136\5\135\1\167\30\135\3\0\2\70\3\0\7\71"+
    "\1\70\1\0\1\70\1\140\2\0\1\141\2\0\1\71"+
    "\5\70\3\0\1\71\12\70\1\142\1\0\5\142\1\0"+
    "\5\142\1\143\5\142\1\170\30\142\25\0\1\141\31\0"+
    "\2\103\3\0\7\104\1\103\1\0\1\103\1\150\2\0"+
    "\1\141\2\0\1\104\5\103\1\151\2\0\1\104\12\103"+
    "\36\0\1\171\15\0\1\152\1\0\5\152\1\0\5\152"+
    "\1\153\5\152\1\172\30\152\25\0\1\141\10\0\1\151"+
    "\22\0\1\173\72\0\1\174\62\0\1\175\20\0\1\130"+
    "\2\0\4\130\1\0\37\130\1\176\5\130\2\0\4\130"+
    "\1\0\37\130\1\177\5\130\2\0\4\130\1\0\34\130"+
    "\1\200\7\130\1\142\1\0\5\142\1\0\5\142\1\143"+
    "\1\142\2\0\2\142\1\144\1\142\1\201\26\142\1\152"+
    "\1\0\5\152\1\0\5\152\1\153\1\152\2\0\2\152"+
    "\1\154\1\152\1\202\10\152\1\203\15\152\24\0\1\204"+
    "\62\0\1\205\20\0\1\130\2\0\4\130\1\0\40\130"+
    "\1\206\4\130\2\0\4\130\1\0\42\130\1\207\2\130"+
    "\2\0\4\130\1\0\35\130\1\210\6\130\1\152\1\0"+
    "\5\152\1\0\5\152\1\153\1\152\2\0\2\152\1\154"+
    "\12\152\1\211\15\152\24\212\1\0\27\212\34\0\1\213"+
    "\17\0\1\130\2\0\4\130\1\0\41\130\1\214\3\130"+
    "\2\0\4\130\1\0\43\130\1\215\1\130\2\0\4\130"+
    "\1\0\36\130\1\216\5\130\14\0\1\217\20\0\1\220"+
    "\16\0\1\130\2\0\4\130\1\0\25\130\1\221\17\130"+
    "\2\0\4\130\1\0\33\130\1\222\10\130\14\0\1\217"+
    "\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\24\0\1\10\1\11\2\1\1\11\3\1\1\11\1\1"+
    "\1\11\16\1\1\11\3\1\3\11\6\1\1\11\2\1"+
    "\1\11\2\1\1\11\6\1\1\11\1\1\1\11\1\1"+
    "\1\0\1\11\3\0\1\11\1\1\1\11\2\1\1\0"+
    "\1\11\5\1\2\0\1\11\1\1\1\11\2\0\1\1"+
    "\1\0\3\1\3\0\1\1\1\0\2\11\2\1\1\0"+
    "\6\1\1\11\1\1\1\11\2\0\5\1\3\0\4\1"+
    "\1\11\1\0\3\1\1\11\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private boolean isOddItalicBold = false;;

  public _ScalaDocLexer() {
    this((java.io.Reader)null);
  }

  public boolean checkAhead(char c) {
     if (zzMarkedPos >= zzBuffer.length()) return false;
     return zzBuffer.charAt(zzMarkedPos) == c;
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzPushbackPos = 0;
    zzAtEOF = offset < zzEndRead;
  }



  public _ScalaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaDocLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2598) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { return DOC_UNDERLINE_TAG;
          }
        case 50: break;
        case 19: 
          { yybegin(DOC_TAG_VALUE_SPACE); return DOC_TAG_VALUE_TOKEN;
          }
        case 51: break;
        case 1: 
          { return DOC_COMMENT_BAD_CHARACTER;
          }
        case 52: break;
        case 40: 
          { yybegin(COMMENT_INNER_CODE);
  return DOC_INNER_CODE_TAG;
          }
        case 53: break;
        case 11: 
          { yybegin(PARAM_DOC_TAG_VALUE); return DOC_COMMENT_DATA;
          }
        case 54: break;
        case 21: 
          { return tDOT;
          }
        case 55: break;
        case 7: 
          { return DOC_COMMENT_DATA;
          }
        case 56: break;
        case 31: 
          { return DOC_ITALIC_TAG;
          }
        case 57: break;
        case 13: 
          { yypushback(1);
  yybegin(COMMENT_DATA);
          }
        case 58: break;
        case 12: 
          { yybegin(PARAM_DOC_THROWS_TAG_VALUE); return DOC_COMMENT_DATA;
          }
        case 59: break;
        case 38: 
          { yybegin(INLINE_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 60: break;
        case 25: 
          { yybegin(CODE_BAD_LINK);
  return tIDENTIFIER;
          }
        case 61: break;
        case 35: 
          { yybegin(COMMENT_DATA);
  return DOC_LINK_CLOSE_TAG;
          }
        case 62: break;
        case 34: 
          { return DOC_MACROS;
          }
        case 63: break;
        case 15: 
          { return DOC_TAG_VALUE_TOKEN;
          }
        case 64: break;
        case 29: 
          { return DOC_COMMENT_END;
          }
        case 65: break;
        case 14: 
          { yybegin(PARAM_DOC_DEFINE_TAG_VALUE); return DOC_COMMENT_DATA;
          }
        case 66: break;
        case 44: 
          { yybegin(COMMENT_DATA);
  return DOC_INNER_CLOSE_CODE_TAG;
          }
        case 67: break;
        case 16: 
          { return DOC_TAG_VALUE_SHARP_TOKEN;
          }
        case 68: break;
        case 20: 
          { yybegin(DOC_TAG_VALUE_SPACE);
  return tIDENTIFIER;
          }
        case 69: break;
        case 27: 
          { yybegin(COMMENT_DATA); return DOC_COMMENT_DATA;
          }
        case 70: break;
        case 6: 
          { return VALID_DOC_HEADER;
          }
        case 71: break;
        case 39: 
          { yybegin(COMMENT_DATA_START); return DOC_COMMENT_START;
          }
        case 72: break;
        case 48: 
          { yybegin(PARAM_THROWS_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 73: break;
        case 43: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { return tIDENTIFIER;
          }
        case 74: break;
        case 37: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return tIDENTIFIER;
          }
        case 75: break;
        case 28: 
          { yybegin(COMMENT_INNER_CODE);
  return DOC_INNER_CODE;
          }
        case 76: break;
        case 26: 
          { yybegin(COMMENT_DATA);
  return DOC_WHITESPACE;
          }
        case 77: break;
        case 49: 
          { yybegin(PARAM_DEFINE_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 78: break;
        case 8: 
          { return DOC_HEADER;
          }
        case 79: break;
        case 32: 
          { return DOC_SUBSCRIPT_TAG;
          }
        case 80: break;
        case 18: 
          { yybegin(DOC_TAG_VALUE_IN_PAREN); return DOC_TAG_VALUE_LPAREN;
          }
        case 81: break;
        case 41: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(INLINE_TAG_NAME);
  return DOC_INLINE_TAG_START;
          }
        case 82: break;
        case 17: 
          { return DOC_TAG_VALUE_COMMA;
          }
        case 83: break;
        case 42: 
          { return DOC_BOLD_TAG;
          }
        case 84: break;
        case 36: 
          { yybegin(TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 85: break;
        case 9: 
          { yybegin(COMMENT_DATA);
   return DOC_WHITESPACE;
          }
        case 86: break;
        case 46: 
          { yybegin(PARAM_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 87: break;
        case 10: 
          { yybegin(COMMENT_DATA); return DOC_WHITESPACE;
          }
        case 88: break;
        case 33: 
          { yybegin(CODE_LINK_INNER);
  return DOC_LINK_TAG;
          }
        case 89: break;
        case 45: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { if (isOddItalicBold) {
    isOddItalicBold = false;
    yypushback(1);
    return DOC_ITALIC_TAG;
  }
  isOddItalicBold = true;
  return DOC_BOLD_TAG;
          }
        case 90: break;
        case 24: 
          { yybegin(INLINE_DOC_TAG_VALUE);
  return DOC_WHITESPACE;
          }
        case 91: break;
        case 23: 
          { yybegin(COMMENT_DATA); return DOC_INLINE_TAG_END;
          }
        case 92: break;
        case 4: 
          { return DOC_SUPERSCRIPT_TAG;
          }
        case 93: break;
        case 3: 
          { return DOC_WHITESPACE;
          }
        case 94: break;
        case 5: 
          { return DOC_MONOSPACE_TAG;
          }
        case 95: break;
        case 22: 
          { yybegin(DOC_TAG_VALUE); return DOC_TAG_VALUE_RPAREN;
          }
        case 96: break;
        case 47: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(COMMENT_DATA);
  return DOC_HTTP_LINK_TAG;
          }
        case 97: break;
        case 2: 
          { yybegin(COMMENT_DATA);
  return DOC_COMMENT_DATA;
          }
        case 98: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
